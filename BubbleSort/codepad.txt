n = number of elements in the array;

pass = number of iterations to ensure all items are sorted = n - 1;
This is bcos, if we have 5 elements, we obviously need to sort only 4 elements
The last one will be sorted by default and will automatically be at the correct position

Within a pass, we have 'n' number of comparisons


Illustration
int[] myArr = [4,2,3,9,0];

Pass 1
4,2,3,9,0
2,4,3,9,0
2,3,4,9,0
2,3,4,9,0
2,3,4,0,9

Pass 2
2,3,4,0,9
2,3,0,4,9
2,0,3,4,9
0,2,3,4,9

....

So we have two loops:
1. The outer loop for the passes (n -1)
2. The inner loop for the comparisons (within a pass, we have iterations)

As the number of passes increases, the number of comparisons in subsequent passes decreases...
So the number of comparisons depend on the number of passes...
The inner loop handles the comparison for each pass

int[] BubbleSort(int[] myArr)
{
    // outer loop for the passes
    // minus 1 bcos, number of passes is (number of elements - 1)
    for(int i = 0; i < myArr.Length - 1; i++)
    {
        // We keep track of if there's a swap within the iterations of a pass
        bool swapped = false;
    
        // the number of iterations in a pass is (number of elements - 1)
        // we add '-i' bcos the more number of passes, the less comparison within subsequent passes...
        for(int j = 0; j < myArr.Length - 1 - i; j++)
        {
            if(myArr[j] > myArr[j + 1])
            {
                int temp = myArr[j];
                myArr[j] = myArr[j + 1];
                myArr[j + 1] = temp;
                swapped = true;
            }
        }
        
        if(!swapped) break;
    }
    
    return myArr;
}