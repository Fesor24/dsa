//Array operations
int[] myArr = {1,4,5,6,7,8};

1. Display
for(int i = 0; i < myArr.Length; i++)
{
    WriteLine($"Value at index {i} is {myArr[i]}");
}

2. Add/Append
Adding the element to the end of the array
Where the length is less then the size
myArr[Length++] = value;
Time complexity is O(1)

3. Insert at a specified index
Where Length is the number of items and array has Size greater than Length
int index = 2;
int value = 10;

for(int i = myArr.Length - 1; i > index; i--)
{
    myArr[i + 1] = myArr[i];
}   

myArr[index] = value;
// Worst case - O(n)
// Best case - O(1)

4. Delete operation
Removing an element from a specified index
When we remove an item from an index, we do not leave it vacant(null)
Otherwise, for each element we would have to check if an item is there or not
So instead of keeping it blank, we would shift the other elements

myArr = {3,4,5,6,7}
index----0,1,2,3,4

delete item at index 3
index = 3;

for(int i = index; i < myArr.Length - 1; i++)
    myArr[i] = myArr[i + 1];
    
// Worst case - O(n)
// Best case - O(1)

5. Search
For performing search, items in the array should be unique

i. Linear
myArr = {1,4,6,8,9,11,3,7,20}
key = 9;

for(i = 0; i < myArr.Length; i++)
{
    if(myArr[i] == key)
        return i;
}
return -1;

// Best case - O(1)
// Worst case - O(n)
// Average case - O(n)

Improvement of linear search
1. Transposition: By swapping the element
e.g myArr = {4,5,6,7,20}, if 20 is searched the first time, after looking for it, we swap with the 
previous element so it now becomes {4,5,6,20,7} if 20 is searched again, it becomes {4,5,20,6,7}
Basically, transposing...this reduces the linear search time by 1 for subsequent search for the same item

2. Move to front: when we find the element, we bring it to the beginning of the array, by swapping with the first element
If we do this, the next time the element is searched if almost immediately, this will be done in constant time

ii. Binary
Items in the array must be sorted
myArr = {1,4,6,7,10,13,18};
key = 13;

int left = 0;
int right = myArr.Length;
int mid;

while (left <= right)
{
    mid = (left + right) / 2;
    
    if(myArr[mid] == key)
        return mid;
        
    else if(key < myArr[mid])
    {
        right = mid - 1;
    }
        
    else
    {
        left = mid + 1;
    } 
}
return -1;

6. Get operation
Getting an element at a particular index

7. Set operation
Replace a value at a particular index

8. Get maximum/minimum
In an unsorted listed, we would have to check the entire list
myArr = {4,3,10,19,2}

int max = myArr[0];
for(int i = 1; i < myArr.Length; i++)
{
    if(max < myArr[i])
        max = myArr[i];
}

9. Get Sum/Average
Sum with recursion
myArr = {3,4,5,7};

int Sum(int[]arr, int n)
{
    // This part prevents it from running infinitely
    if(n < 0)
        return 0;
        
    return Sum(arr, n - 1) + arr[n];
}

// Call function...
Sum(myArr, myArr.Length - 1);

10. Reverse and shift an array
i. Reverse
Method one: using a second array, then copying the first item to the second one
This method takes time taken O(n)
myArr = {3,4,5,2,10,99};
myArr2 = new int[myArr.Length];

for(int i = myArr.Length - 1, j = 0; i >= 0; i--, j++)
    myArr2[j] = myArr[i];
    
A second for loop to copy items from myArr2 to myArr
for(int i = 0; i < myArr2.Length; i++)
    myArr[i] = myArr2[i]; 
    
Method Two: Swap the elements, for example, the first element with the last element
We do not need a second array for this
Time taken is O(n)

myArr = {6,4,2,9,3,9};

for(int i = 0, j = myArr.Length - 1; i<j; i++,j--)
{
    int temp = myArr[i];
    myArr[i] = myArr[j];
    myArr[j] = temp;
}

ii. Left shift/rotate
Shifting every element to the left. The first item goes out and for the others, it moves to the left
for(int i = 1; i < myArr.Length; i++)
    myArr[i - 1] = myArr[i];
    
myArr[myArr.Length - 1] = 0;
    
While for rotation, the first item goes to the last.
Similar to right shift
for(int i = myArr.Length - 2; i >= 0; i--)
    myArr[i + 1] = myArr[i];
     
Time taken for all is O(n)

Sorted array
1. Insertion in a sorted array
myArr = {2,4,6,8,9,10}
item = 5;

Idea is we start from the last item, if item to be inserted is greater, we insert at the last
Otherwise, we shift items to the right. This way we do not need to find the position by comparing all the elements

Condition: Array with unique elements

int lastItemPosition = myArr.Length - 1;
while(item < myArr[lastItemPosition])
{
    myArr[lastItemPosition + 1] = myArr[lastItemPosition];
    lastItemPosition--; 
}
// we add + 1 bcos after the loop, lastItemPosition is pointing to the last element that is less
// than or equal to the item (where the shifting stopped)
// The next index (lastItemPosition + 1) is the correct insertion point 
myArr[lastItemPosition + 1] = item;

NB: for loops are useful when you know how many times you are going to repeat

2. Checking if the array is sorted or not
bool sorted = true;

for(int i = 0; i < myArr.Length - 1)
{
    if(myArr[i] > myArr[i + 1])
        return false;
}

return true;

3. An array with positive and negative numbers and we want to bring all negatives to the left and positives to the right
Time taken is O(n)

myArr = {-2,4,5,3,-1,-4,-6,9}

int i = 0;
int j = myArr.Length;

while(i < j)
{
    while(myArr[i] < 0)
        i++;
        
    while(myArr[j] >= 0)
        j--;
        
    if(i < j)
    {
        int temp = myArr[i];
        myArr[i] = myArr[j];
        myArr[j] = temp;
    }
}

4. Merging arrays
Combining two sorted list into a single sorted array
Merging can be done only on sorted arrays

Time taken is Theta(m + n)
Where m is the length of the first array and n is the second

myArr = {1,4,5,6,7};
myArr2 = {3,8,9,10,12};

int i = 0, j =0, k = 0;

merged = new int[myArr.Length + myArr2.Length];

// We have to stop if the first array ends or the second
while(i < myArr.Length && j < myArr2.Length)
{
    if(myArr[i] < myArr2[j])
        merged[k++] = myArr[i++];
    
    else
        merged[k++] = myArr[j++];
}

// Remaining part is to handle the left overs from the array
// At least one will be remaining
while(i < myArr.Length)
    merged[k++] = myArr[i++];
    
while(j < myArr2.Length)
    merged[j++] = myArr2[j++];


Set Operations
i. Union Operation
Union first array and second array to third array
How: Copy the items of the first array to the third array
Now for each item in the second array, we check if it is in the third array
if it is not there, we copy it

myArr1 = {4,3,12,1,90};
myArr2 = {5,9,8,2,29};

myArr3 = new int[myArr1.Length + myArr2.Length];
Time complexity is O(n2)

In a case where the first array and second array are sorted,
we do it the same way we did merging of array, only difference is that, if both are same, we copy only one
and we move both i and j
Time complexity is O(n)

int[] myArr1 = {2,4,5,6};
int[] myArr2 = {2,3,7,8};
int[] myArr3 = new int[myArr1.Length + myArr2.Length];

int i = 0, j = 0, k = 0;

while(i < myArr1.Length && j < myArr2.Length)
{
    if(myArr1[i] == myArr2[j])
    {
        // we select only one and increment both
        myArr3[k++] = myArr1[i++];
        j++;
    }
    
    else if(myArr1[i] < myArr2[j])
    {
        myArr3[k++] = myArr1[i++];
    }
    
    else
        myArr3[k++] = myArr2[j++];
}

while(i < myArr1.Length)
    myArr3[k++] = myArr1[i++];
    
while(j < myArr2.Length)
    myArr3[k++] = myArr2[j++];
    
Intersection and Difference are similar to Union with some changes
Intersection - we take common elements of a and b and store in c
i.e items that are both in a and b
Take first item from a
Check if it is in b
if it is there, store it in c
a = {4,5,6};
b = {3,5,6}
c = new int[Math.Min(a.Length, b.Length)];
int k = 0;

for(int i = 0; i < a.Length; i++)
{
    for(int j = 0; j < b.Length; j++)
    {
        if(a[i] == b[j])
        {
            bool added = false;
            
            for(int m = 0; m < k; m++)
            {
                if(k[m] == a[i])
                {
                    added = true;
                    break;
                }
                
            }
            
            if(!added)
                c[k++] = a[i];
        }
        
    }
}

Difference
We want the elements in a which are not in b
Opposite of intersection

Find missing elements
myArr = {1,2,3,4,5,7,8,9,10};

for(int)