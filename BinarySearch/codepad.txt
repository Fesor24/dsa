int[] myArr = [1,3,5,6,8]; // looking for 6
index values---0,1,2,3,4
left is start index, hence 0
right is the last index, hence arr.Length - 1

if mid is index 3 (value 5) and we are looking for 6 (index 4), we shift left to mid + 1 (4)
here, value 5 is less than the search value (6)
arr[mid] < searchValue => left = mid + 1

// Return the index of the target
int BinarySearch(int[] arr, int target)
{
    int left = 0;
    int right = arr.Length - 1;
        
    while(left <= right)
    {
        int mid = (left + right) / 2;
        
        if(arr[mid] == target)
            return mid;
            
        // bring left forward if the value at mid is less than target
        else if (arr[mid] < target)
            left = mid + 1;
        
        // bring right backward if value at mid is larger than target
        else if (arr[mid] > target)
            right = mid - 1;
    }
       
    return -1;
}

int BinarySearchRecursion(int[] myArr, int left, int right, int target)
{
    if(left <= right)
    {
        int mid = (left + right) / 2;
        
        if(myArr[mid] == target)
            return mid;
            
        else if(target > myArr[mid])
            BinarySearchRecursion(myArr, mid + 1, right, target);
            
        else if(target < myArr[mid])
            BinarySearchRecursion(myArr, left, right - 1, target);
    }
    
    return -1;
}